#! /usr/bin/perl
#
# ypk control.xml generator
#
# Copyright (c) 2011-2012 Ylmf OS
#
# Written by: 0o0<0o0zzyz@gmail.com>
# Version: 0.1
# Date: 2012.3.3
#
# Usage:
#       ypkg2-gencontrol [--desktop] [DIR] ...
#       ypkg2-gencontrol --help
#

use strict;
use warnings;

use File::Find;
use File::Copy;
use POSIX qw/uname/;
use Digest::MD5 qw/md5_hex/;

my ( $desktop, $install, $total_size, $disk_usage, $dir_count, $file_count, $link_count ) = ( 0, 0, 0, 0, 0, 0, 0 );

sub usage
{
    print "Usage:\n  ypkg2-gencontrol [--desktop]  [DIR] ...\n  ypkg2-gencontrol --help\n";
}

sub xml_content
{
'<?xml version="1.0" encoding="UTF-8"?>
<PackageInfo>
    <Package name="">
        <genericname%s>
            <keyword lang="en"></keyword>
        </genericname>
        <category></category>          
        <arch>%s</arch>                                        
        <version></version>                            
        <yversion></yversion>                            
        <priority></priority>                    
        <license></license>
        <packager></packager>
        <homepage></homepage>
        <repo></repo>
        <install>%s</install>
        <build_date></build_date>    
        <uri></uri>
        <description%s>
            <keyword lang="en"></keyword>
        </description>
        <data_count>1</data_count>
        <data id="0">                                                    
            <name>pkgdata</name>                          
            <format>xz</format>
            <size></size>
            <install_size>%d</install_size>        
            <depend></depend>              
            <bdepend></bdepend>
            <recommended></recommended>      
            <conflict></conflict>      
        </data>                              
    </Package>
</PackageInfo>';
}

sub get_info
{
    if( $_ eq '.' )
    {
        return;
    } 

    if( $File::Find::name =~ m[^\./YLMFOS] )
    {
        if( /.*\.desktop/ )
        {
            $desktop = 1;
        }
        elsif( /.*\.install/ )
        {
            $install = $_;
        }
        return;
    }

    if( $File::Find::name =~ m[^\./var/ypkg/db/.*?/.*?\.install$] )
    {
        return;
    }

    my ( $type, $extra );

    my ( $dev, $ino, $mode, $nlink, $uid, $gid, $rdev, $size, $atime, $mtime, $ctime, $blksize, $blocks ) = lstat;

    if( -d $_ )
    {
        $type = 'D';
        $extra = '';
        $dir_count++;
    }
    elsif( -l $_ )
    {
        $type = 'S';
        $extra = readlink;
        $link_count++;
    }
    else
    {
        $type = 'F';
        open FILE, $_ or die "Cannot open '$_':$!";
        binmode FILE;
        $extra = Digest::MD5->new->addfile( *FILE )->hexdigest;
        close FILE;
        $file_count++;
        $total_size += $size;
    }

    $disk_usage += $blocks;

    printf FILELIST "%s,%s,%d,%04o,%d,%d,%d,%s\n", $type, substr( $File::Find::name, 1 ), $size, $mode & 0777, $uid, $gid, $mtime, $extra ;
}

sub generate_control
{
    if( ! -d -r -w -x $_[0] )
    {
        print "Permission denied for $_[0]!\n";
        return -1;
    }

    my $pwd = $ENV{'PWD'};

    chdir $_[0];

    if( ! -e 'YLMFOS' )
    {
        mkdir 'YLMFOS', 0755 or return -1;;
    }
    else
    {
        if( ! -d -r -w -x 'YLMFOS' )
        {
            print "Permission denied for YLMFOS!\n";
            return -1;
        }
    }


    #create filelist
    if( ! open FILELIST, '>YLMFOS/filelist' )
    {
            print "Cannot create YLMFOS/filelist!\n";
            return -1;
    }

    find( { wanted => \&get_info, follow => 1 }, '.' );

    printf FILELIST "I,%d,%d,%d,%ld,%d\n", $file_count, $dir_count, $link_count, $disk_usage / 2, ($total_size - 1) / 1024 + 1;

    close FILELIST;


    #create control.xml
    my @uname = uname;
    if( ! -e 'YLMFOS/control.xml' )
    {
        if( ! open CONTROL, '>YLMFOS/control.xml' )
        {
                print "Cannot create YLMFOS/control.xml!\n";
                return -1;
        }

        my $desktop_str = $desktop == 1 ? ' type="desktop"' : '';

        printf CONTROL &xml_content, $desktop_str, $uname[4], $install, $desktop_str, $total_size;

        close CONTROL;
    }
    else
    {
        copy( 'YLMFOS/control.xml', 'YLMFOS/control.xml.bak' );

        if( ! open CONTROLBAK, 'YLMFOS/control.xml.bak' )
        {
                print "Cannot open YLMFOS/control.xml.bak!\n";
                return -1;
        }

        if( ! open CONTROL, '>YLMFOS/control.xml' )
        {
                print "Cannot create YLMFOS/control.xml!\n";
                return -1;
        }

        while( <CONTROLBAK> )
        {
            if( /<install_size>/ )
            {
                s#(<install_size>).*?(</install_size>)#$1$total_size$2#;
            }
            elsif( /<genericname/ )
            {
                if( $desktop )
                {
                    $_ = "        <genericname type=\"desktop\">\n";
                }
                else
                {
                    $_ = "        <genericname>\n";

                }
            }
            elsif( /<arch/ )
            {
                s#(<arch>).*?(</arch>)#$1$uname[4]$2#;
            }
            elsif( /<install/ )
            {
                if( $install )
                {
                    s#(<install>).*?(</install>)#$1$install$2#;
                }
                else
                {
                    $_ = "        <install></install>\n";
                }
            }
            elsif( /<description/ )
            {
                if( $desktop )
                {
                    $_ = "        <description type=\"desktop\">\n";
                }
                else
                {
                    $_ = "        <description>\n";

                }
            }

            print CONTROL;
        }

        close CONTROL;
        close CONTROLBAK;
        unlink 'YLMFOS/control.xml.bak';
    }

    chdir $pwd;
    0;
}

if( @ARGV == 0 )
{
    exit &generate_control( '.' );
}

for( @ARGV )
{
    if( $_ eq "--desktop" )
    {
        $desktop = 1;
        last;
    }
    elsif( $_ eq "--help" )
    {
        &usage;
        exit 0;
    }
    elsif( /^-/ )
    {
        &usage;
        exit 0;
    }
}

for( @ARGV )
{
    if( /^-/ )
    {
        next;
    }
    &generate_control( $_ );
}
